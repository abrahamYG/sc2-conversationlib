include "Script/ConvUI/Modules/Transmission/main";
include "Script/ConvUI/Modules/Briefing/main";

static const string CONVUI_CONVERSATIONID = "TestConversation";
static const string CONVUI_DEBUGBUTTONPATH = "UIContainer/FullscreenUpperContainer/ConvoButton0";

static bool ConvUI_DebugConversationInitialized = false;
static bool ConvUI_DebugCharactersInitialized = false;
static bool ConvUI_DebugCallbacksInitialized = false;
static bool ConvUI_DebugButtonsInitialized = false;

CConversation ConvUI_DebugConversation;
ConversationCallback ConvUI_DebugCallbacks;
int[3] ConvUI_DebugButton;


void ConvUI_DebugCreateDialogIntLineCallback(CConversationRef Conversation, SConversationLineRef Line, CCharacterRef Character, int index){
	int dlg;
	string template;
	playergroup pg = PlayerGroupActive();
	int player = PlayerGroupPlayer(pg,1);

	if(index%2 != 0){
		template = CONVUI_LINEDLG_TEMPLATELEFT;
	}
	else{
		template = CONVUI_LINEDLG_TEMPLATERIGHT;
	}
    dlg = ConvUI_LineDialogCreate(Line,Character,template);
    TriggerDebugOutput(1,StringToText("Line: "+Line.Id),true);
	DialogControlSetPositionRelative(dlg,pg,c_anchorTop,ConvUI_DialogMainHookupGet(),c_anchorTop,0,(250*(index-1)));
	//TriggerDebugOutput(1,IntToText(index)+Line.Text,true);
}
void ConvUI_TransmissionCreateDialogIntLineCallback(CConversationRef Conversation, SConversationLineRef Line, CCharacterRef Character, int index){
	int dlg;
	string template;
	playergroup pg = PlayerGroupActive();
	int player = PlayerGroupPlayer(pg,1);

	if(index%2 != 0){
		template = CONVUI_LINEDLG_TEMPLATELEFT;
	}
	else{
		template = CONVUI_LINEDLG_TEMPLATERIGHT;
	}
    dlg = ConvUI_LineDialogCreate(Line,Character,template);
    TriggerDebugOutput(1,StringToText("Line: "+Line.Id),true);
	DialogControlSetPositionRelative(dlg,pg,c_anchorTop,ConvUI_DialogMainHookupGet(),c_anchorTop,0,(250*(index-1)));
	//TriggerDebugOutput(1,IntToText(index)+Line.Text,true);
}

void ConvUI_DebugLineCallback(CConversationRef Conversation, SConversationLineRef Line, CCharacterRef Character, int index){
	//ConvUI_DebugCreateDialogIntLineCallback(Conversation,Line,Character,index);
    ConvUI_CreateTransmissionLineCallback(Conversation,Line,Character,index);
    //ConvUI_DebugSendBriefingTransmissionLineCallback(Conversation,Line,Character,index);
}

void ConvUI_DebugWaitCallback(CConversationRef Conversation, SConversationWaitRef WaitRef, int index){
    fixed Duration = IntToFixed(WaitRef.Duration)/1000;
    //TriggerDebugOutput(1,StringToText("Waiting: "+FixedToString(Duration,2)),true);
    //TriggerDebugOutput(1,StringToText("wait: "+WaitRef.Id),true);
    Wait(Duration,c_timeReal);
}

void ConvUI_DebugChoiceCallback(CConversationRef Conversation, SConversationChoiceRef Choice, CCharacterRef Character, int index){
    TriggerDebugOutput(1,StringToText("Choice: "+Choice.Id),true);
    //TriggerDebugOutput(1,Choice.Text,true);
}

void ConvUI_DebugRunActionsCallback(CConversationRef Conversation, SConversationRunActionsRef RunActions, int index){
    TriggerDebugOutput(1,StringToText("RunActions: "+RunActions.Id),true);
}
void ConvUI_DebugCommentCallback(CConversationRef Conversation, SConversationCommentRef Comment, int index){
    TriggerDebugOutput(1,StringToText("Comment: "+Comment.Id),true);
}
void ConvUI_DebugJumpCallback(CConversationRef Conversation, SConversationJumpRef Jump, int index){
    TriggerDebugOutput(1,StringToText("Jump: "+Jump.Id),true);
}

void ConvUI_DebugGroupCallback(CConversationRef Conversation, SConversationGroupRef Group, int index){
    TriggerDebugOutput(1,StringToText("Group: "+Group.Id),true);
}


void ConvUI_InitDebugConversation(){
    if(ConvUI_DebugConversationInitialized){return;}
    ConvUI_CConversationCreateFromData(ConvUI_DebugConversation,CONVUI_CONVERSATIONID);
    ConvUI_DebugConversationInitialized = true;
}

void ConvUI_InitDebugCharacters(){
    if(ConvUI_DebugCharactersInitialized){return;}
    ConvUI_CCharacterCreateFromCatalog(ConvUI_CCharacters);
    ConvUI_DebugCharactersInitialized = true;
}


void ConvUI_InitDebugCallbacks(){
    ConversationCallbackRef Callbacks = ConvUI_DebugCallbacks;
    if(ConvUI_DebugCallbacksInitialized){return;}
    Callbacks.LineCallback = ConvUI_DebugLineCallback;
    Callbacks.WaitCallback = ConvUI_DebugWaitCallback;
    Callbacks.ChoiceCallback = ConvUI_DebugChoiceCallback;
    Callbacks.RunActionsCallback = ConvUI_DebugRunActionsCallback;
    Callbacks.CommentCallback = ConvUI_DebugCommentCallback;
    Callbacks.JumpCallback = ConvUI_DebugJumpCallback;
    Callbacks.GroupCallback = ConvUI_DebugGroupCallback;
    ConvUI_DebugCallbacksInitialized = true;
}


void ConvUI_InitDebugButtons(){
    int i = 0;
    trigger t;
    int player = 1;
    playergroup pg = PlayerGroupSingle(player);
    if(ConvUI_DebugButtonsInitialized){return;}
    t = TriggerCreate("ConvUI_DebugButtonFunc");
    for(i = 0;i<3;i+=1){
        ConvUI_DebugButton[i] = DialogControlHookupStandard(c_triggerControlTypeButton,CONVUI_DEBUGBUTTONPATH+IntToString(i+1));
        TriggerAddEventDialogControl(t,player,ConvUI_DebugButton[i],c_triggerControlEventTypeClick);
    }
    ConvUI_DebugButtonsInitialized = true;
}



void ConvUI_RunDataConversation(CConversationRef Conversation){
    playergroup pg = PlayerGroupActive();
	int player = PlayerGroupPlayer(pg,1);
    int Portrait1 = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
    int Portrait2 = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterRight);
    string CharacterId1 = Conversation.DefaultSpeaker1;
    string CharacterId2 = Conversation.DefaultSpeaker2;

    libNtve_gf_CinematicMode(true, pg, c_transitionDurationImmediate);
    ConversationDataPreloadLines(Conversation.Id);
    ConversationDataRegisterPortrait(CharacterId1, Portrait1);
    ConversationDataRegisterPortrait(CharacterId2, Portrait2);
    ConversationDataRun(Conversation.Id,pg, c_conversationSkipFull, true);
    libNtve_gf_CinematicMode(false, pg, c_transitionDurationImmediate);
}


bool ConvUI_DebugButtonFunc(bool a, bool b){
    int player = EventPlayer();
    playergroup pg = PlayerGroupSingle(player);
    CConversationRef Conversation = ConvUI_DebugConversation;
    arrayref<CCharacterArray> Characters = ConvUI_CCharacters;
    ConversationCallbackRef Callbacks = ConvUI_DebugCallbacks;
    int button = EventDialogControl();
    if(button==ConvUI_DebugButton[0]){
        DialogControlSetVisible(ConvUI_BriefingPane.Frame,pg,false);
        ConvUI_TransmissionCallbackSet(Callbacks);
    }
    else if(button==ConvUI_DebugButton[1]){
        DialogControlSetVisible(ConvUI_BriefingPane.Frame,pg,true);
        Callbacks.LineCallback = ConvUI_TransmissionSendBriefingTransmissionLineCallback;
    }
    else if(button==ConvUI_DebugButton[2]){
        DialogControlSetVisible(ConvUI_BriefingPane.Frame,pg,false);
        Callbacks.LineCallback = ConvUI_DebugCreateDialogIntLineCallback;
    }
    else{
        return false;
    }
    ConvUI_ConversationRun(Conversation,Characters,Callbacks,player);
    //ConvUI_RunDataConversation(Conversation);
    return true;
}



bool ConvUI_DebugRunConversationFunc(bool a, bool b){
    int player = EventPlayer();
    CConversationRef Conversation = ConvUI_DebugConversation;
    arrayref<CCharacterArray> Characters = ConvUI_CCharacters;
    ConversationCallbackRef Callbacks = ConvUI_DebugCallbacks;
    
    ConvUI_ConversationRun(Conversation,Characters,Callbacks,player);
    return true;
}



//I wish i knew why i set this as a trigger instead of a regular func, if you as me, maybe i did so i could rerun it on demand
bool ConvUI_DebugInitTriggerFunc(bool a, bool b){
    ConvUI_InitDebugConversation();
    ConvUI_InitDebugCharacters();
    ConvUI_InitDebugCallbacks();
    ConvUI_InitDebugButtons();

    return true;
}
//Init funtion,must be run, as guessed, on map init
void ConvUI_DebugInit(){
    trigger t;
    t = TriggerCreate("ConvUI_DebugInitTriggerFunc");
    TriggerExecute(t,false,false);
    t = TriggerCreate("ConvUI_DebugRunConversationFunc");
    
}