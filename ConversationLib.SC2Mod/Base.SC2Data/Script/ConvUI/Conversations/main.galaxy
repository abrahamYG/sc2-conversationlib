include "Script/ConvUI/Characters/header";
include "Script/ConvUI/Conversations/header";


bool ConvUI_SConversationGroupHasOnlyChoices(CConversationRef Conversation, SConversationGroupRef Group){
	bool onlyChoices = true;
	int Count = ConvUI_SConversationGroupGetChildrenCount(Conversation,Group);
	int i = 0;
	for(i=0;i<Count;i+=1){
		onlyChoices = onlyChoices && StringContains(Group.Children[i],"Choice",0,true);
	}
	return onlyChoices;
}

int ConvUI_SConversationGroupGetChildrenCount(CConversationRef Conversation, SConversationGroupRef Group){
	int index = ConvUI_CConversationGroupGetById(Conversation,Group.Id);
	int count = TConversationItemIdArraySize;
	string Field = "Groups[" + IntToString(index) + "].Children";
	if(index>=0){
		count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, Field, c_playerAny),TConversationItemIdArraySize);
	}
	return count;
}

int ConvUI_ConversationRootItemsCount(CConversationRef Conversation){
	return MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "RootItems", c_playerAny),TConversationItemIdArraySize);
}




string ConvUI_SConversationWaitCreateFromData(SConversationWaitRef WaitRef, string convId, string Field, int index){
	WaitRef.Id =  CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);;
	WaitRef.Duration=  CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Duration", c_playerAny);
	//WaitRef.Conditions;
	WaitRef.ConditionCheck=  CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	return WaitRef.Id;
}


string ConvUI_SConversationJumpCreateFromData(SConversationJumpRef Jump, string convId, string Field, int index){
	//string Field = "Jumps[" + IntToString(index) + "]";
	string Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Jump.Id = Id;
	Jump.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	//Jump.Conditions;
	Jump.Location = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Location", c_playerAny);
	return Id;
}

string ConvUI_SConversationChoiceCreateFromData(SConversationChoiceRef Choice, string convId, string Field, int index){
	//string Field = "Choices[" + IntToString(index) + "]";
	string Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Choice.Id = Id;
	Choice.Text = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Text", c_playerAny));
	Choice.Comment = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	Choice.RequiresPrevious = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".RequiresPrevious", c_playerAny) > 0;
	Choice.Permanent = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Permanent", c_playerAny) > 0;
	Choice.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	//Choice.Conditions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny);
	//Choice.Actions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Actions", c_playerAny);
	//Choice.Children = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Children", c_playerAny);
	return Id;
}


string ConvUI_SConversationConditionCreateFromData(SConversationConditionRef Condition, string convId, string Field, int index){
	Condition.FixedId = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".FixedId", c_playerAny);
	Condition.Index = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Index", c_playerAny);
	Condition.Operation = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Operation", c_playerAny);;
	Condition.State =CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".State", c_playerAny);
	Condition.Value = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Value", c_playerAny);;
	Condition.User.Field = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Field", c_playerAny);
	Condition.User.Index = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".User.Index", c_playerAny);;
	Condition.User.Instance = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Instance", c_playerAny);
	Condition.User.Type = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Type", c_playerAny);
	return Condition.FixedId;
}

string ConvUI_SConversationRunActionsCreateFromData(SConversationRunActionsRef RunActions, string convId, string Field, int index){
	int i = 0;
	int count;
	RunActions.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	RunActions.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny); //EConversationConditionCheck 
	count = MinI(SConversationConditionArraySize,CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny));
	for(i=0;i<count;i+=1){
		RunActions.Conditions[i].FixedId = "";
		ConvUI_SConversationConditionCreateFromData(RunActions.Conditions[i], convId, Field+".Conditions["+IntToString(i)+"]", i);
	} //SConversationConditionArray 
	count = MinI(SConversationActionArraySize,CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Actions", c_playerAny));
	for(i=0;i<count;i+=1){
		RunActions.Actions[i].FixedId = "";
	}  //SConversationActionArray 
	return RunActions.Id;
}

string ConvUI_SConversationGroupCreateFromData(SConversationGroupRef Group, string convId, string Field, int index){
	int ChildrenCount = CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Children", c_playerAny);
	int i = 0;
	
	Group.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Group.Name=StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Name", c_playerAny));
	Group.Comment=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	Group.ChoiceSelection=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ChoiceSelection", c_playerAny);;
	Group.MaxChoices=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".MaxChoices", c_playerAny);
	//Group.//EConversationSelectionMethod LineSelection;
	Group.MaxLines=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".MaxLines", c_playerAny);
	//Group.PlayOnceOnly=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".PlayOnceOnly", c_playerAny);
	//Group.//TConversationStateIndexId ChoiceCamera;
	//Group.//EConversationConditionCheck ConditionCheck;
	//Group.//std::vector<SConversationCondition> Conditions;
	Group.CutsceneFile=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CutsceneFile", c_playerAny);
	//Group.//CGamePoint3D CutscenePosition;
	//Group.ApplyCutsceneToChildren=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	//Group.Children;//std::vector<TConversationItemId> Children=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	ChildrenCount = MinI(ChildrenCount,TConversationItemIdArraySize);
	for(i=0;i<ChildrenCount;i+=1){
		Group.Children[i] = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Children["+IntToString(i)+"]", c_playerAny);
		Group.ChoiceSelection = e_conversationSelectionMethodAll;
	}
	return Group.Id;
}

string ConvUI_SConversationLineCreateFromData(SConversationLineRef Line, string convId, string Field, int index){
	string TextRef = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field, c_playerAny);
	
	Line.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Line.Text = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Text", c_playerAny));
	Line.Comment = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	//Line.FacialAnim; //TConversationItemId 
	Line.FacialBlend = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".FacialBlend", c_playerAny);
	//Line.FacialAsVoiceDir = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".FacialAsVoiceDir", c_playerAny);
	Line.Sound = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Sound", c_playerAny);
	Line.SoundIndex = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".SoundIndex", c_playerAny);
	Line.FixedDuration = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".FixedDuration", c_playerAny);
	//Line.NoWait = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".NoWait", c_playerAny);
	Line.OverlapPrevious = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".OverlapPrevious", c_playerAny);
	//Line.//CAnimProps AnimProps;
	Line.AnimBlendIn = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".AnimBlendIn", c_playerAny);
	Line.AnimBlendOut = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".AnimBlendOut", c_playerAny);
	Line.LookAtType = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".LookAtType", c_playerAny);
	//Line.//CAttachMethods LookAtAttach;
	//Line.//std::vector<TConversationStateIndexId> Objects;
	//Line.//std::vector<TConversationStateVariation> Variations;
	Line.CustomSpeaker = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CustomSpeaker", c_playerAny));
	Line.SpeakerCharacter = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".SpeakerCharacter", c_playerAny);
	Line.SpeakerVariation = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".SpeakerVariation", c_playerAny);
	Line.ListenerCharacter = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".ListenerCharacter", c_playerAny);
	//Line.AltLine = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".AltLine", c_playerAny);
	//Line.AltLineMatchText = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".AltLineMatchText", c_playerAny);
	//Line.//EConversationConditionCheck ConditionCheck;
	//Line.Conditions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny);//std::vector<SConversationCondition> 
	//Line.//std::vector<SConversationAction> Actions;
	Line.CutsceneFile = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CutsceneFile", c_playerAny);
	//Line.//CGamePoint3D CutscenePosition;
	return Line.Id;
}

TConversationItemId ConvUI_TConversationItemIdCreateFromData(string convId, int index){
	TConversationItemId item = CatalogFieldValueGet(c_gameCatalogConversation, convId, "RootItems["+IntToString(index)+"]", c_playerAny);
	return item;
};

string ConvUI_CConversationCreateFromData(CConversationRef Conversation,string convId){
	int i = 0;
	int Count = 0;
	string Field;
	SConversationLineRef Line;
	SConversationGroupRef Group;
	SConversationRunActionsRef RunAction;
	SConversationWaitRef WaitRef;
	SConversationJumpRef Jump;
	SConversationChoiceRef Choice;
	SConversationCommentRef Comment;
	TConversationItemId Item;
	Conversation.Id = convId;

	Field = "Lines";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationLineArraySize);
	for(i=0;i<Count;i+=1){
		Line = Conversation.Lines[i];
		ConvUI_SConversationLineCreateFromData(Line,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Groups";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationGroupArraySize);
	for(i=0;i<Count;i+=1){
		Group = Conversation.Groups[i];
		ConvUI_SConversationGroupCreateFromData(Group,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "RootItems";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),TConversationItemIdArraySize);
	for(i=0;i<Count;i+=1){
		Item = ConvUI_TConversationItemIdCreateFromData(convId,i);
		Conversation.RootItems[i] = Item;
	}
	Field = "RunActions";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationRunActionsArraySize);
	for(i=0;i<Count;i+=1){
		RunAction = Conversation.RunActions[i];
		ConvUI_SConversationRunActionsCreateFromData(RunAction, convId,Field+"[" + IntToString(i) + "]", i);
	}
	Field = "Waits";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationWaitArraySize);
	for(i=0;i<Count;i+=1){
		WaitRef = Conversation.Waits[i];
		ConvUI_SConversationWaitCreateFromData(WaitRef,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Jumps";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationJumpArraySize);
	for(i=0;i<Count;i+=1){
		Jump = Conversation.Jumps[i];
		ConvUI_SConversationJumpCreateFromData(Jump,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Choices";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationChoiceArraySize);
	for(i=0;i<Count;i+=1){
		Choice = Conversation.Choices[i];
		ConvUI_SConversationChoiceCreateFromData(Choice,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Comments";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationCommentArraySize);
	for(i=0;i<Count;i+=1){
		Comment = Conversation.Comments[i];
	}
	return Conversation.Id;
}

void ConvUI_SConversationGroupSetChoiceValue(CConversationRef Conversation, SConversationGroupRef Group, int val){
	string key = "ConvUI_ManagedConversation[{id}].ChoiceGroup[{group}]";
	key = StringReplaceWord(key,"{id}",Conversation.Id,1,false);
	key = StringReplaceWord(key,"{group}",Group.Id,1,false);
	DataTableSetInt(true,key,val);
	
}
int ConvUI_SConversationGroupWaitForChoiceDebugFunc(){
	int debugval = RandomInt(0,100);
	TriggerDebugOutput(1,StringToText("ConvUI_SConversationGroupWaitForChoiceDebugFunc Debugval:"+IntToString(debugval)),true);
	return debugval;	
}

void ConvUI_SConversationGroupWaitForChoice(CConversationRef Conversation, SConversationGroupRef Group){
	string key = "ConvUI_ManagedConversation[{id}].ChoiceGroup[{group}]";
	int debugval = 0;
	key = StringReplaceWord(key,"{id}",Conversation.Id,1,false);
	key = StringReplaceWord(key,"{group}",Group.Id,1,false);
	DataTableSetInt(true,key,-1);
	while(DataTableGetInt(true,key)<0){
		Wait(0.05,c_timeReal);
		if(ConvUI_SConversationGroupWaitForChoiceDebugFunc()>90){
			ConvUI_SConversationGroupSetChoiceValue(Conversation,Group,1);
		}
	}
}

void ConvUI_SConversationChildrenSetRun(CConversationRef Conversation,arrayref<CCharacterArray> Characters, ConversationCallbackRef Callbacks, arrayref<TConversationItemIdArray> Children, int Count, int player){
	int i =0;
	int childIndex = -1;
	int lineCount = 0;
	int waitCount = 0;
	int runActionsCount = 0;
	int jumpCount = 0;
	int choiceCount = 0;
	int commentCount = 0;
	int groupCount = 0;
	int charIndex = -1;
	string eventString;
	SConversationGroupRef Group;
	SConversationLineRef Line;
	SConversationWaitRef WaitRef;
	SConversationRunActionsRef RunActions;
	SConversationJumpRef Jump;
	SConversationChoiceRef Choice;
	SConversationCommentRef Comment;
	CCharacterRef Character;
	TConversationItemId Child;
	SConversationLineCallback LineCallback = Callbacks.LineCallback;
	SConversationWaitCallback WaitCallback = Callbacks.WaitCallback;
	SConversationRunActionsCallback RunActionsCallback = Callbacks.RunActionsCallback;
	SConversationJumpCallback JumpCallback = Callbacks.JumpCallback;
	SConversationChoiceCallback ChoiceCallback = Callbacks.ChoiceCallback;
	SConversationCommentCallback CommentCallback = Callbacks.CommentCallback;
	SConversationGroupCallback GroupCallback = Callbacks.GroupCallback;

	int SubChildrenCount = 0;

	for(i=0;i<Count;i+=1){
		Child = Children[i];
		if(StringContains(Child,"Line",0,true)){
			childIndex = ConvUI_CConversationLineGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			Line = Conversation.Lines[childIndex];
			lineCount += 1;
			charIndex = ConvUI_CCharacterGetbyID(Characters, Line.SpeakerCharacter);
			if(charIndex<0){
				Character = ConvUI_EmptyCharacter;
			}
			else {
				Character = Characters[charIndex];
			}

			eventString = ConvUI_GetLineCallbackEventString(Conversation.Id,Line.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,Character.Id,Line.Id,"Line",player,true);
			TriggerSendEvent(eventString);

			LineCallback(Conversation,Line,Character,lineCount, player);

			eventString = ConvUI_GetLineCallbackEventString(Conversation.Id,Line.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,Character.Id,Line.Id,"Line",player,false);
			TriggerSendEvent(eventString);
			
		}
		else if(StringContains(Child,"Wait",0,true)){
			childIndex = ConvUI_CConversationWaitGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			WaitRef = Conversation.Waits[childIndex];
			waitCount += 1;

			eventString = ConvUI_GetWaitCallbackEventString(Conversation.Id,WaitRef.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,"",WaitRef.Id,"Wait",player,true);
			TriggerSendEvent(eventString);
			
			WaitCallback(Conversation,WaitRef,waitCount, player);

			eventString = ConvUI_GetWaitCallbackEventString(Conversation.Id,WaitRef.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,"",WaitRef.Id,"Wait",player,false);
			TriggerSendEvent(eventString);
			
		}
		else if(StringContains(Child,"RunActions",0,true)){
			childIndex = ConvUI_CConversationRunActionsGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			RunActions = Conversation.RunActions[childIndex];
			runActionsCount += 1;

			eventString = ConvUI_GetRunActionsCallbackEventString(Conversation.Id,RunActions.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,"",RunActions.Id,"RunActions",player,true);
			TriggerSendEvent(eventString);

			RunActionsCallback(Conversation,RunActions,runActionsCount, player);

			eventString = ConvUI_GetRunActionsCallbackEventString(Conversation.Id,RunActions.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,"",RunActions.Id,"RunActions",player,false);
			TriggerSendEvent(eventString);
			
		}
		
		else if(StringContains(Child,"Jump",0,true)){
			childIndex = ConvUI_CConversationJumpGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			Jump = Conversation.Jumps[childIndex];
			jumpCount += 1;

			eventString = ConvUI_GetJumpCallbackEventString(Conversation.Id,Jump.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,"",Jump.Id,"Jump",player,true);
			TriggerSendEvent(eventString);
			
			JumpCallback(Conversation,Jump,jumpCount, player);

			eventString = ConvUI_GetJumpCallbackEventString(Conversation.Id,Jump.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,"",Jump.Id,"Jump",player,false);
			TriggerSendEvent(eventString);

			if(Jump.Location==""){DataTableSetBool(false,"Conversation."+Conversation.Id+".Exit",true);}
			else{
				Child = Jump.Location;
			}
		}
		
		else if(StringContains(Child,"Choice",0,true)){
			childIndex = ConvUI_CConversationChoiceGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			Choice = Conversation.Choices[childIndex];
			choiceCount += 1;
			charIndex = ConvUI_CCharacterGetbyID(Characters,Line.SpeakerCharacter);
			if(charIndex<0){
				Character = ConvUI_EmptyCharacter;
			}
			else {
				Character = Characters[charIndex];
			}

			eventString = ConvUI_GetChoiceCallbackEventString(Conversation.Id,Choice.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,Character.Id,Choice.Id,"Choice",player,true);
			TriggerSendEvent(eventString);

			ChoiceCallback(Conversation,Choice,Character,choiceCount, player);

			eventString = ConvUI_GetChoiceCallbackEventString(Conversation.Id,Choice.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,Character.Id,Choice.Id,"Choice",player,false);
			TriggerSendEvent(eventString);

			SubChildrenCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "Choices["+IntToString(childIndex)+"].Children", c_playerAny),TConversationItemIdArraySize);;
			ConvUI_SConversationChildrenSetRun(Conversation,Characters,Callbacks,Choice.Children,SubChildrenCount, player);
		}
		
		else if(StringContains(Child,"Comment",0,true)){
			childIndex = ConvUI_CConversationCommentGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			Comment = Conversation.Comments[childIndex];
			commentCount += 1;
			
			eventString = ConvUI_GetCommentCallbackEventString(Conversation.Id,Comment.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,"",Comment.Id,"Comment",player,true);
			TriggerSendEvent(eventString);

			CommentCallback(Conversation,Comment,commentCount, player);

			eventString = ConvUI_GetCommentCallbackEventString(Conversation.Id,Comment.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,"",Comment.Id,"Comment",player,false);
			TriggerSendEvent(eventString);
		}
		if(StringContains(Child,"Group",0,true)){
			childIndex = ConvUI_CConversationGroupGetById(Conversation,Child);
			if(childIndex<0){
				continue;
			}
			Group = Conversation.Groups[childIndex];
			groupCount += 1;

			
			eventString = ConvUI_GetGroupCallbackEventString(Conversation.Id,Group.Id,true);
			ConvUI_EventParamsStore(Conversation.Id,"",Group.Id,"Group",player,true);
			TriggerSendEvent(eventString);

			GroupCallback(Conversation,Group,groupCount, player);

			eventString = ConvUI_GetGroupCallbackEventString(Conversation.Id,Group.Id,false);
			ConvUI_EventParamsStore(Conversation.Id,"",Group.Id,"Group",player,false);
			TriggerSendEvent(eventString);
			
			SubChildrenCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "Groups["+IntToString(childIndex)+"].Children", c_playerAny),TConversationItemIdArraySize);;
			if(ConvUI_SConversationGroupHasOnlyChoices(Conversation,Group)){
				ConvUI_SConversationGroupWaitForChoice(Conversation,Group);
			}
			else{
				ConvUI_SConversationChildrenSetRun(Conversation,Characters,Callbacks,Group.Children,SubChildrenCount, player);
			}
		}
		if (DataTableGetBool(false,"Conversation."+Conversation.Id+".Exit")){break;};
	}
}



void ConvUI_ConversationRun(CConversationRef Conversation,arrayref<CCharacterArray> Characters,ConversationCallbackRef CallbackSet, int player){
	int i =0;
	int ChildrenCount = 0;
	int GroupIndex;
	arrayref<TConversationItemIdArray> RootItems  = Conversation.RootItems;
	int RootItemsCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "RootItems", c_playerAny),TConversationItemIdArraySize);
	arrayref<TConversationItemIdArray> Children;
	
	
	SConversationGroupRef Group;
	CallbackSet.ConversationStartCallback(Conversation,Characters,player);
	ConvUI_SConversationChildrenSetRun(Conversation,Characters,CallbackSet,RootItems,RootItemsCount, player);
	CallbackSet.ConversationEndCallback(Conversation,Characters,player);
};