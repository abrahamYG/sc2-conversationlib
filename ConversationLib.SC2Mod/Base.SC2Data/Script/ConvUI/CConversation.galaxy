include "Script/ConvUI/Headers/CConversation_h";
include "Script/ConvUI/Headers/CConversationGetById_h";

bool ConvUI_SConversationGroupHasOnlyChoices(CConversationRef Conversation, SConversationGroupRef Group){
	bool onlyChoices = true;
	int Count = ConvUI_SConversationGroupGetChildrenCount(Conversation,Group);
	int i = 0;
	for(i=0;i<Count;i+=1){
		onlyChoices = onlyChoices && StringContains(Group.Children[i],"Choice",0,true);
	}
	return onlyChoices;
}

int ConvUI_SConversationGroupGetChildrenCount(CConversationRef Conversation, SConversationGroupRef Group){
	int index = ConvUI_CConversationGroupGetById(Conversation,Group.Id);
	int count = TConversationItemIdArraySize;
	string Field = "Groups[" + IntToString(index) + "].Children";
	if(index>=0){
		count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, Field, c_playerAny),TConversationItemIdArraySize);
	}
	return count;
}



string ConvUI_SConversationWaitCreateFromData(SConversationWaitRef WaitRef, string convId, string Field, int index){
	WaitRef.Id =  CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);;
	WaitRef.Duration=  CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Duration", c_playerAny);
	//WaitRef.Conditions;
	WaitRef.ConditionCheck=  CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	return WaitRef.Id;
}


string ConvUI_SConversationJumpCreateFromData(SConversationJumpRef Jump, string convId, string Field, int index){
	//string Field = "Jumps[" + IntToString(index) + "]";
	string Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Jump.Id = Id;
	Jump.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	//Jump.Conditions;
	Jump.Location = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Location", c_playerAny);
	return Id;
}

string ConvUI_SConversationChoiceCreateFromData(SConversationChoiceRef Choice, string convId, string Field, int index){
	//string Field = "Choices[" + IntToString(index) + "]";
	string Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Choice.Id = Id;
	Choice.Text = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Text", c_playerAny));
	Choice.Comment = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	Choice.RequiresPrevious = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".RequiresPrevious", c_playerAny) > 0;
	Choice.Permanent = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Permanent", c_playerAny) > 0;
	Choice.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny);
	//Choice.Conditions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny);
	//Choice.Actions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Actions", c_playerAny);
	//Choice.Children = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Children", c_playerAny);
	return Id;
}


string ConvUI_SConversationConditionCreateFromData(SConversationConditionRef Condition, string convId, string Field, int index){
	Condition.FixedId = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".FixedId", c_playerAny);
	Condition.Index = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Index", c_playerAny);
	Condition.Operation = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Operation", c_playerAny);;
	Condition.State =CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".State", c_playerAny);
	Condition.Value = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".Value", c_playerAny);;
	Condition.User.Field = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Field", c_playerAny);
	Condition.User.Index = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".User.Index", c_playerAny);;
	Condition.User.Instance = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Instance", c_playerAny);
	Condition.User.Type = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".User.Type", c_playerAny);
	return Condition.FixedId;
}

string ConvUI_SConversationRunActionsCreateFromData(SConversationRunActionsRef RunActions, string convId, string Field, int index){
	int i = 0;
	int count;
	RunActions.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	RunActions.ConditionCheck = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ConditionCheck", c_playerAny); //EConversationConditionCheck 
	count = MinI(SConversationConditionArraySize,CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny));
	for(i=0;i<count;i+=1){
		RunActions.Conditions[i].FixedId = "";
		ConvUI_SConversationConditionCreateFromData(RunActions.Conditions[i], convId, Field+".Conditions["+IntToString(i)+"]", i);
	} //SConversationConditionArray 
	count = MinI(SConversationActionArraySize,CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Actions", c_playerAny));
	for(i=0;i<count;i+=1){
		RunActions.Actions[i].FixedId = "";
	}  //SConversationActionArray 
	return RunActions.Id;
}

string ConvUI_SConversationGroupCreateFromData(SConversationGroupRef Group, string convId, string Field, int index){
	int ChildrenCount = CatalogFieldValueCount(c_gameCatalogConversation, convId, Field+".Children", c_playerAny);
	int i = 0;
	
	Group.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Group.Name=StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Name", c_playerAny));
	Group.Comment=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	Group.ChoiceSelection=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".ChoiceSelection", c_playerAny);;
	Group.MaxChoices=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".MaxChoices", c_playerAny);
	//Group.//EConversationSelectionMethod LineSelection;
	Group.MaxLines=CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".MaxLines", c_playerAny);
	//Group.PlayOnceOnly=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".PlayOnceOnly", c_playerAny);
	//Group.//TConversationStateIndexId ChoiceCamera;
	//Group.//EConversationConditionCheck ConditionCheck;
	//Group.//std::vector<SConversationCondition> Conditions;
	Group.CutsceneFile=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CutsceneFile", c_playerAny);
	//Group.//CGamePoint3D CutscenePosition;
	//Group.ApplyCutsceneToChildren=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	//Group.Children;//std::vector<TConversationItemId> Children=CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	ChildrenCount = MinI(ChildrenCount,TConversationItemIdArraySize);
	for(i=0;i<ChildrenCount;i+=1){
		Group.Children[i] = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Children["+IntToString(i)+"]", c_playerAny);
		Group.ChoiceSelection = e_conversationSelectionMethodAll;
	}
	return Group.Id;
}

string ConvUI_SConversationLineCreateFromData(SConversationLineRef Line, string convId, string Field, int index){
	string TextRef = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field, c_playerAny);
	
	Line.Id = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Id", c_playerAny);
	Line.Text = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Text", c_playerAny));
	Line.Comment = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Comment", c_playerAny);
	//Line.FacialAnim; //TConversationItemId 
	Line.FacialBlend = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".FacialBlend", c_playerAny);
	//Line.FacialAsVoiceDir = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".FacialAsVoiceDir", c_playerAny);
	Line.Sound = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Sound", c_playerAny);
	Line.SoundIndex = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".SoundIndex", c_playerAny);
	Line.FixedDuration = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".FixedDuration", c_playerAny);
	//Line.NoWait = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".NoWait", c_playerAny);
	Line.OverlapPrevious = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".OverlapPrevious", c_playerAny);
	//Line.//CAnimProps AnimProps;
	Line.AnimBlendIn = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".AnimBlendIn", c_playerAny);
	Line.AnimBlendOut = CatalogFieldValueGetAsInt(c_gameCatalogConversation, convId, Field+".AnimBlendOut", c_playerAny);
	Line.LookAtType = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".LookAtType", c_playerAny);
	//Line.//CAttachMethods LookAtAttach;
	//Line.//std::vector<TConversationStateIndexId> Objects;
	//Line.//std::vector<TConversationStateVariation> Variations;
	Line.CustomSpeaker = StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CustomSpeaker", c_playerAny));
	Line.SpeakerCharacter = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".SpeakerCharacter", c_playerAny);
	Line.SpeakerVariation = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".SpeakerVariation", c_playerAny);
	Line.ListenerCharacter = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".ListenerCharacter", c_playerAny);
	//Line.AltLine = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".AltLine", c_playerAny);
	//Line.AltLineMatchText = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".AltLineMatchText", c_playerAny);
	//Line.//EConversationConditionCheck ConditionCheck;
	//Line.Conditions = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".Conditions", c_playerAny);//std::vector<SConversationCondition> 
	//Line.//std::vector<SConversationAction> Actions;
	Line.CutsceneFile = CatalogFieldValueGet(c_gameCatalogConversation, convId, Field+".CutsceneFile", c_playerAny);
	//Line.//CGamePoint3D CutscenePosition;
	return Line.Id;
}

TConversationItemId ConvUI_TConversationItemIdCreateFromData(string convId, int index){
	TConversationItemId item = CatalogFieldValueGet(c_gameCatalogConversation, convId, "RootItems["+IntToString(index)+"]", c_playerAny);
	return item;
};

string ConvUI_CConversationCreateFromData(CConversationRef Conversation,string convId){
	int i = 0;
	int Count = 0;
	string Field;
	SConversationLineRef Line;
	SConversationGroupRef Group;
	SConversationRunActionsRef RunAction;
	SConversationWaitRef WaitRef;
	SConversationJumpRef Jump;
	SConversationChoiceRef Choice;
	SConversationCommentRef Comment;
	TConversationItemId Item;
	Conversation.Id = convId;

	Field = "Lines";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationLineArraySize);
	for(i=0;i<Count;i+=1){
		Line = Conversation.Lines[i];
		ConvUI_SConversationLineCreateFromData(Line,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Groups";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationGroupArraySize);
	for(i=0;i<Count;i+=1){
		Group = Conversation.Groups[i];
		ConvUI_SConversationGroupCreateFromData(Group,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "RootItems";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),TConversationItemIdArraySize);
	for(i=0;i<Count;i+=1){
		Item = ConvUI_TConversationItemIdCreateFromData(convId,i);
		Conversation.RootItems[i] = Item;
	}
	Field = "RunActions";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationRunActionsArraySize);
	for(i=0;i<Count;i+=1){
		RunAction = Conversation.RunActions[i];
		ConvUI_SConversationRunActionsCreateFromData(RunAction, convId,Field+"[" + IntToString(i) + "]", i);
	}
	Field = "Waits";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationWaitArraySize);
	for(i=0;i<Count;i+=1){
		WaitRef = Conversation.Waits[i];
		ConvUI_SConversationWaitCreateFromData(WaitRef,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Jumps";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationJumpArraySize);
	for(i=0;i<Count;i+=1){
		Jump = Conversation.Jumps[i];
		ConvUI_SConversationJumpCreateFromData(Jump,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Choices";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationChoiceArraySize);
	for(i=0;i<Count;i+=1){
		Choice = Conversation.Choices[i];
		ConvUI_SConversationChoiceCreateFromData(Choice,convId,Field+"[" + IntToString(i) + "]",i);
	}
	Field = "Comments";
	Count = MinI(CatalogFieldValueCount(c_gameCatalogConversation, convId, Field, c_playerAny),SConversationCommentArraySize);
	for(i=0;i<Count;i+=1){
		Comment = Conversation.Comments[i];
	}
	return Conversation.Id;
}

void ConvUI_SConversationGroupWaitForChoice(){
	bool choicePicked = false;
	while(!choicePicked){
		Wait(0.05,c_timeReal);
	}
}

void ConvUI_SConversationChildrenSetRun(CConversationRef Conversation,arrayref<CCharacterArray> Characters, ConversationCallbackRef CallbackSet, arrayref<TConversationItemIdArray> Children, int Count){
	int i =0;
	int ChildIndex = -1;
	int LineCount = 0;
	int WaitCount = 0;
	int RunActionsCount = 0;
	int JumpCount = 0;
	int ChoiceCount = 0;
	int CommentCount = 0;
	int GroupCount = 0;
	int CharIndex = -1;
	//arrayref<SConversationLineArray> Lines = Conversation.Lines;
	SConversationGroupRef Group;
	SConversationLineRef Line;
	SConversationWaitRef WaitRef;
	SConversationRunActionsRef RunActions;
	SConversationJumpRef Jump;
	SConversationChoiceRef Choice;
	SConversationCommentRef Comment;
	CCharacterRef Character;
	TConversationItemId Child;
	SConversationLineCallback LineCallback = CallbackSet.LineCallback;
	SConversationWaitCallback WaitCallback = CallbackSet.WaitCallback;
	SConversationRunActionsCallback RunActionsCallback = CallbackSet.RunActionsCallback;
	SConversationJumpCallback JumpCallback = CallbackSet.JumpCallback;
	SConversationChoiceCallback ChoiceCallback = CallbackSet.ChoiceCallback;
	SConversationCommentCallback CommentCallback = CallbackSet.CommentCallback;
	SConversationGroupCallback GroupCallback = CallbackSet.GroupCallback;

	int SubChildrenCount = 0;

	for(i=0;i<Count;i+=1){
		Child = Children[i];
		if(StringContains(Child,"Line",0,true)){
			ChildIndex = ConvUI_CConversationLineGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			Line = Conversation.Lines[ChildIndex];
			LineCount += 1;
			CharIndex = ConvUI_CCharacterGetbyID(Characters,Line.SpeakerCharacter);
			if(CharIndex<0){
				Character = ConvUI_EmptyCharacter;
			}
			else {
				Character = Characters[CharIndex];
			}
			TriggerSendEvent(ConvUI_GetLineCallbackEventString(Conversation.Id,Line.Id,true));
			LineCallback(Conversation,Line,Character,LineCount);
			TriggerSendEvent(ConvUI_GetLineCallbackEventString(Conversation.Id,Line.Id,false));
			
		}
		else if(StringContains(Child,"Wait",0,true)){
			ChildIndex = ConvUI_CConversationWaitGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			WaitRef = Conversation.Waits[ChildIndex];
			WaitCount += 1;
			WaitCallback(Conversation,WaitRef,WaitCount);
		}
		else if(StringContains(Child,"RunActions",0,true)){
			ChildIndex = ConvUI_CConversationRunActionsGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			RunActions = Conversation.RunActions[ChildIndex];
			RunActionsCount += 1;
			RunActionsCallback(Conversation,RunActions,RunActionsCount);
		}
		
		else if(StringContains(Child,"Jump",0,true)){
			ChildIndex = ConvUI_CConversationJumpGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			Jump = Conversation.Jumps[ChildIndex];
			JumpCount += 1;
			JumpCallback(Conversation,Jump,JumpCount);
			if(Jump.Location==""){DataTableSetBool(false,"Conversation."+Conversation.Id+".Exit",true);}
			else{
				Child = Jump.Location;
			}
		}
		
		else if(StringContains(Child,"Choice",0,true)){
			ChildIndex = ConvUI_CConversationChoiceGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			Choice = Conversation.Choices[ChildIndex];
			ChoiceCount += 1;
			CharIndex = ConvUI_CCharacterGetbyID(Characters,Line.SpeakerCharacter);
			if(CharIndex<0){
				Character = ConvUI_EmptyCharacter;
			}
			else {
				Character = Characters[CharIndex];
			}
			TriggerSendEvent(ConvUI_GetLineCallbackEventString(Conversation.Id,Choice.Id,true));
			ChoiceCallback(Conversation,Choice,Character,ChoiceCount);
			TriggerSendEvent(ConvUI_GetLineCallbackEventString(Conversation.Id,Choice.Id,false));
			SubChildrenCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "Choices["+IntToString(ChildIndex)+"].Children", c_playerAny),TConversationItemIdArraySize);;
			ConvUI_SConversationChildrenSetRun(Conversation,Characters,CallbackSet,Choice.Children,SubChildrenCount);
		}
		
		else if(StringContains(Child,"Comment",0,true)){
			ChildIndex = ConvUI_CConversationCommentGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			Comment = Conversation.Comments[ChildIndex];
			CommentCount += 1;
			CommentCallback(Conversation,Comment,CommentCount);
		}
		if(StringContains(Child,"Group",0,true)){
			ChildIndex = ConvUI_CConversationGroupGetById(Conversation,Child);
			if(ChildIndex<0){
				continue;
			}
			Group = Conversation.Groups[ChildIndex];
			GroupCount += 1;
			GroupCallback(Conversation,Group,GroupCount);
			SubChildrenCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "Groups["+IntToString(ChildIndex)+"].Children", c_playerAny),TConversationItemIdArraySize);;
			if(ConvUI_SConversationGroupHasOnlyChoices(Conversation,Group)){
				//run function loop here
			}
			else{
				ConvUI_SConversationChildrenSetRun(Conversation,Characters,CallbackSet,Group.Children,SubChildrenCount);
			}
		}
		if (DataTableGetBool(false,"Conversation."+Conversation.Id+".Exit")){break;};
	}
}



void ConvUI_ConversationRun(CConversationRef Conversation,arrayref<CCharacterArray> Characters,ConversationCallbackRef CallbackSet, int player){
	int i =0;
	int ChildrenCount = 0;
	int GroupIndex;
	arrayref<TConversationItemIdArray> RootItems  = Conversation.RootItems;
	int RootItemsCount = MinI(CatalogFieldValueCount(c_gameCatalogConversation, Conversation.Id, "RootItems", c_playerAny),TConversationItemIdArraySize);
	arrayref<TConversationItemIdArray> Children;
	
	
	SConversationGroupRef Group;
	ConvUI_SConversationChildrenSetRun(Conversation,Characters,CallbackSet,RootItems,RootItemsCount);
};